// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  about         String? 
  role Role @default(MAHASISWA)
  accounts      Account[]
  sessions      Session[]
  vacanys Vacany[]
  data UserData[]
  dataregistration DataRegistration[]


  @@map("users")
}

enum Role {
  MAHASISWA
  ORGANISASI
  UKM
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Vacany {
  id String @id @default(cuid())
  name String? 
  description String? 
  requirements String?
  expires DateTime @default("2020-03-19T14:21:00+02:00")
  create_at DateTime @default(now())
  AuthorOrganization User @relation(fields: [AuthorOrganizationEmail],references: [email] ,onDelete: Cascade)
  AuthorOrganizationEmail String
  listVacany DataRegistration[]
  @@map("vacanys")
}

model UserData{
  id String @id @default(cuid())
  about String? 
  contact String? 
  experince String?
  emailuser User @relation(fields : [email],references : [email], onDelete: Cascade)
  email String @unique
}

model DataRegistration {
  id String @id @default(cuid())
  motlet String 
  cvkreatif String?
  ktm String 
  create_at DateTime @default(now())
  vacany Vacany @relation(fields: [vacanyId], references: [id] ,onDelete: Cascade)
  vacanyId String
  email User @relation(fields: [emailUser], references: [email] ,onDelete: Cascade)
  emailUser String
}